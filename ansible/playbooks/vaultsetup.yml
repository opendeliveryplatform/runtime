---
- hosts: controller
  vars:
    vault_tls_ca_crt: "{{ vault_tls_src_dir }}/ca.pem"
    vault_tls_dest_dir: "/etc/vault/ssl"
    vault_tls_src_dir: "/home/vagrant/pki"
  environment:
    VAULT_ADDR: https://192.168.56.21:8200
    VAULT_CAPATH: /etc/vault/ssl
    VAULT_CACERT: "{{vault_tls_ca_crt}}"
  tasks:
  - name: Create SSL directory
    become: yes
    file:
      dest: "{{ vault_tls_dest_dir }}"
      state: directory
      owner: root
      group: root
      mode: 0755

  - name: Copy key material
    become: True
    copy:
      src: "{{ vault_tls_src_dir }}/{{ item }}"
      dest: "{{ vault_tls_dest_dir }}/{{ item }}"
    with_items:
    - ca.pem

  - name: "register vault status"
    hashivault_status:
      ca_cert: "{{vault_tls_ca_crt}}"
    ignore_errors: True
    register: vault_status

  - name: "debug"
    debug:
      var: vault_status

  - name: "initialize vault"
    block:
    - name: "init vault"
      hashivault_init:
        ca_cert: "{{vault_tls_ca_crt}}"
      register: vault_init
    - name: "backup keys"
      become: True
      copy:
        content: "{{vault_init | to_json}}"
        dest: "/etc/vault/keys.json"
    when: vault_status|failed

  - name: "read keys"
    block:
    - name: "lookup keys"
      slurp:
        src: /etc/vault/keys.json
      register: vault_keys
    - set_fact:
        vault_init: "{{vault_keys['content'] | b64decode }}"
    when: vault_status|succeeded

  - name: "keys"
    debug:
      msg: "{{vault_keys}}"

  - name: "register vault status"
    hashivault_status:
      ca_cert: "{{vault_tls_ca_crt}}"
    ignore_errors: True
    register: vault_status

  - name: unseal vault
    import_tasks: vault_unseal.yml

  - name: "set nomad server policy"
    hashivault_policy_set:
      ca_cert: "{{vault_tls_ca_crt}}"
      name: nomad_server
      rules: "{{ lookup('file', 'nomad-server-policy.hcl')}}"
      token: "{{vault_init.root_token}}"
    register: vault_policy_set

  - name: "set nomad cluster role"
    hashivault_write:
      ca_cert: "{{vault_tls_ca_crt}}"
      secret: /auth/token/roles/nomad-cluster
      data: "{{ lookup('file', 'nomad-cluster-role.json')}}"
      token: "{{vault_init.root_token}}"
    register: vault_role_set

#
# This token is used to allow nomad access to vault secrets.
# This references the nomad server policy (nomad_server) defined above
#

  - name: check for vault_nomad_token
    stat:
      path: "/etc/vault/nomad_token.json"
    register: st_nomad_token_json
  
  - block:
    - name: read token
      slurp:
        src: /etc/vault/nomad_token.json
      register: nomad_token_b64
    
    - set_fact:
        nomad_token: "{{ nomad_token_b64.content | b64decode }}"

    - debug:
        msg: "{{ nomad_token }}"

    - name: "lookup token"
      hashivault_token_lookup:
        lookup_token: "{{nomad_token.auth.client_token}}"
        token: "{{vault_init.root_token}}"
      register: st_nomad_token
      ignore_errors: True

    - debug:
        msg: "{{ st_nomad_token }}"
    when: st_nomad_token_json.stat.exists
  
  - name: "create vault nomad token"
    hashivault_token_create:
      ca_cert: "{{vault_tls_ca_crt}}"
      display_name: "nomad"
      policies:
      - nomad_server
      renewable: True
      ttl: "72h"
      orphan: True
      token: "{{vault_init.root_token}}"
    register: vault_nomad_token
    when: not st_nomad_token_json.stat.exists or st_nomad_token|failed

  - debug:
      var: vault_nomad_token

  - name: "save vault_nomad_token"
    become: True
    copy:
      content: "{{vault_nomad_token.token | to_json}}"
      dest: "/etc/vault/nomad_token.json"
    when: vault_nomad_token is changed

  - include_tasks: vault-features.yml