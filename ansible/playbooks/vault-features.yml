---
- hosts: vault_master
  tasks:
  - name: ensure pip is installed
    package:
        name: python-pip
    become: True
  - name: install hvac
    pip:
        name: hvac
    become: True
  
  - name: get vault status
    hashivault_status:
      url: https://active.vault.service.consul:8200
      ca_cert: "/etc/vault/ssl/ca.pem"
    register: 'vault_status'
    tags: vault_status
    run_once: True
  
  - debug:
      msg: "{{vault_status}}"
    tags: vault_status
  
  - block:
    - name: "get client token"
      set_fact:
        tmp_data: "{{lookup('file', '/etc/vault/keys.json')| from_json}}"
      tags: vault_status
    - name: "extract client token"
      set_fact:
        client_token: "{{tmp_data.root_token}}"
      tags: vault_status
    - hashivault_secret_list:
        url: https://active.vault.service.consul:8200
        ca_cert: "/etc/vault/ssl/ca.pem"
        token: "{{client_token}}"
      register: 'hashivault_secret_list'
      tags: secret_list
    
    - name: setup vault policies
      import_tasks: vault-policies.yml
      tags: policies

    - name: enable ldap auth backend
      hashivault_auth_enable:
        name: "ldap"
        url: https://active.vault.service.consul:8200
        ca_cert: "/etc/vault/ssl/ca.pem"
        token: "{{client_token}}"

    - name: config ldap auth backend
      hashivault_write:
        url: https://active.vault.service.consul:8200
        ca_cert: "/etc/vault/ssl/ca.pem"
        token: "{{client_token}}"
        secret: '/auth/ldap/config'
        data:
          url: "ldaps://192.168.56.22:636"
          insecure_tls: True
          userattr: "uid"
          userdn: "ou=users,dc=opendp,dc=org"
          groupdn: "ou=groups,dc=opendp,dc=org"
          groupattr: "cn"
          groupfilter: "(&(objectclass=groupOfNames)(member={{'{{.UserDN}}'}}))"
          binddn: "cn=admin,dc=opendp,dc=org"
          bindpass: "secret"
      tags: config_db_con

    - name: config ldap group mappings
      hashivault_write:
        url: https://active.vault.service.consul:8200
        ca_cert: "/etc/vault/ssl/ca.pem"
        token: "{{client_token}}"
        secret: '/auth/ldap/groups/visitors'
        data:
          policies: ["visitor"]
      tags: config_db_con

    - name: config ldap group mappings for cluster-admins
      hashivault_write:
        url: https://active.vault.service.consul:8200
        ca_cert: "/etc/vault/ssl/ca.pem"
        token: "{{client_token}}"
        secret: '/auth/ldap/groups/cluster-admins'
        data:
          policies: ["vault-admin"]
      tags: config_db_con

    - name: enable database secrets backend
      hashivault_secret_enable:
        name: "database"
        backend: "database"
        url: https://active.vault.service.consul:8200
        ca_cert: "/etc/vault/ssl/ca.pem"
        token: "{{client_token}}"

    - name: config odp database connection
      hashivault_write:
        url: https://active.vault.service.consul:8200
        ca_cert: "/etc/vault/ssl/ca.pem"
        token: "{{client_token}}"
        secret: '/database/config/odp'
        data:
          plugin_name: 'postgresql-database-plugin'
          allowed_roles: 'readonly'
          connection_url: "postgresql://{{'{{username}}'}}:{{'{{password}}'}}@192.168.56.21:5432/?sslmode=disable"
          username: 'postgres'
          password: 'post1234gres'
      tags: config_db_con
       
    - name: config database role
      hashivault_write:
        url: https://active.vault.service.consul:8200
        ca_cert: "/etc/vault/ssl/ca.pem"
        token: "{{client_token}}"
        secret: '/database/roles/readonly'
        data:
          db_name: 'odp'
          creation_statements: "CREATE ROLE \"{{'{{name}}'}}\" WITH LOGIN PASSWORD '{{'{{password}}'}}' VALID UNTIL '{{'{{expiration}}'}}'; GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"{{'{{name}}'}}\";"
          default_ttl: '3m'
          max_ttl: '24h'
    when: vault_status.status.sealed == False
    run_once: True
