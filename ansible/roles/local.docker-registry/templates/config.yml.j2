#jinja2: lstrip_blocks: True
# {{ ansible_managed }}
version: 0.1
log:
  accesslog:
    disabled: {{ docker_registry_log_accesslog_disabled | lower }}
  level: {{ docker_registry_log_level }}
  formatter: {{ docker_registry_log_formatter }}
  fields: {{ docker_registry_log_fields | to_yaml }}
{% if docker_registry_log_hooks is defined %}
  hooks: {{ docker_registry_log_hooks }}
{% endif %}
storage:
{% if docker_registry_storage_type == 'filesystem' %}
  filesystem:
    rootdirectory: {{docker_registry_storage_file_rootdirectory}}
    maxthreads: {{ docker_registry_storage_file_maxthreads }}
{% endif %}
{% if docker_registry_storage_type == 's3' %}
  s3:
    {% if docker_registry_storage_s3_accesskey is defined %}
    accesskey: {{docker_registry_storage_s3_accesskey}}
    {% endif %}
    {% if docker_registry_storage_s3_secretkey is defined %}
    secretkey: {{ docker_registry_storage_s3_secretkey }}
    {% endif %}
    region: {{ docker_registry_storage_s3_region }}
    {% if docker_registry_storage_s3_regionendpoint is defined %}
    regionendpoint: {{ docker_registry_storage_s3_regionendpoint }}
    {% endif %}
    bucket: {{ docker_registry_storage_s3_bucket }}
    {% if docker_registry_storage_s3_encrypt is defined %}
    encrypt: {{docker_registry_storage_s3_encrypt | lower }}
    {% endif %}
    {% if docker_registry_storage_s3_keyid is defined %}
    keyid: mykeyid
    {% endif %}
    secure: {{ docker_registry_storage_s3_secure | lower}}
    v4auth: {{ docker_registry_storage_s3_v4auth | lower}}
    {% if docker_registry_storage_s3_chunksize is defined %}
    chunksize: {{ docker_registry_storage_s3_chunksize }}
    {% endif %}
    {% if docker_registry_storage_s3_rootdirectory is defined %}
    rootdirectory: {{ docker_registry_storage_s3_rootdirectory }}
    {% endif %}
    {% if docker_registry_storage_s3_storageclass is defined %}
    storageclass: {{ docker_registry_storage_s3_storageclass }}
    {% endif %}
{% endif %}
  delete:
    enabled: {{docker_registry_delete_enabled | lower}}
  redirect:
    disable: {{ docker_registry_redirect_disable | lower}}
  cache:
    blobdescriptor: {{ docker_registry_cache_blobdescriptor}}
  maintenance:
    uploadpurging:
      enabled: {{ docker_registry_maintenance_uploadpurging_enabled | lower}}
      age: {{ docker_registry_maintenance_uploadpurging_age }}
      interval: {{ docker_registry_maintenance_uploadpurging_interval }}
      dryrun: {{ docker_registry_maintenance_uploadpurging_dryrun | lower }}
    readonly:
      enabled: {{ docker_registry_maintenance_uploadpurging_readonly_enabled | lower}}
auth:
{% if 'token' in docker_registry_auth_schemas %}
  token:
    realm: token-realm
    service: token-service
    issuer: registry-token-issuer
    rootcertbundle: /root/certs/bundle
{% endif %}
{% if 'htpasswd' in docker_registry_auth_schemas %} 
  htpasswd:
    realm: basic-realm
    path: {{ docker_registry_auth_htpasswd_path }}
{% endif %} 
http:
  addr: {{ docker_registry_http_addr }}
  {% if docker_registry_http_prefix is defined %}
  prefix: {{ docker_registry_http_prefix }}
  {% endif %}
  {% if docker_registry_http_host is defined %}
  host: {{ docker_registry_http_host }}
  {% endif %}
  {% if docker_registry_http_secret is defined %}
  secret: {{ docker_registry_http_secret }}
  {% endif %}
  relativeurls: {{ docker_registry_http_relativeurls | default(false) }}
  tls:
    certificate: {{docker_registry_http_tls_certificate}}
    key: {{ docker_registry_http_tls_key }}
{% if docker_registry_http_tls_clientcas is defined %}
    clientcas: {{ docker_registry_http_tls_clientcas | to_yaml }}
{% endif %}
  debug:
    addr: {{ docker_http_debug_addr }}
  headers:
    X-Content-Type-Options: [nosniff]
  http2:
    disabled: false
#notifications:
#  endpoints:
#    - name: alistener
#      disabled: false
#      url: https://my.listener.com/event
#      headers: <http.Header>
#      timeout: 500
#      threshold: 5
#      backoff: 1000
#      ignoredmediatypes:
#        - application/octet-stream
{% if docker_registry_cache_blobdescriptor == 'redis' %}
redis:
  addr: {{ docker_registry_redis_addr }}
  password: {{ docker_registry_redis_password }}
  db: {{ docker_registry_redis_db }}
  dialtimeout: {{ docker_registry_redis_dialtimeout }}
  readtimeout: {{ docker_registry_redis_readtimeout }}
  writetimeout: {{ docker_registry_redis_writetimeout }}
  pool:
    maxidle: {{ docker_registry_redis_pool_maxidle }}
    maxactive: {{ docker_registry_redis_pool_maxactive }}
    idletimeout: {{ docker_registry_redis_pool_idletimeout }}
{% endif %}
health:
  storagedriver:
    enabled: true
    interval: 10s
    threshold: 3
  file:
#    - file: /path/to/checked/file
#      interval: 10s
  http:
#   - uri: http://server.to.check/must/return/200
#     headers:
#       Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]
#     statuscode: 200
#     timeout: 3s
#     interval: 10s
#     threshold: 3
  tcp:
#   - addr: redis-server.domain.com:6379
#     timeout: 3s
#     interval: 10s
#     threshold: 3

{% if docker_registry_proxy_enabled %}
proxy:
  remoteurl: https://registry-1.docker.io
  username: [username]
  password: [password]
{% endif %}
{% if docker_registry_validation_enabled %}
validation:
  enabled: true
  manifests:
    urls:
      allow:
        - ^https?://([^/]+\.)*example\.com/
      deny:
        - ^https?://www\.example\.com/
{% endif %}